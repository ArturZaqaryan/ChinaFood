// <auto-generated />
using System;
using ChinaFood.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChinaFood.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241230133607_DiscountAdded")]
    partial class DiscountAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChinaFood.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("DishType")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubtitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5704a8e-4731-41aa-b37b-dc387332cc09"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3044),
                            Discount = 0,
                            DishType = 0,
                            Price = 12.99m,
                            SubCategoryId = new Guid("547a230d-a5e0-4885-8f35-4a17f8d47e1b"),
                            SubtitleEn = "Spicy stir-fried chicken",
                            TitleArm = "Կունգ Պաո Հավ",
                            TitleEn = "Kung Pao Chicken",
                            TitleRu = "Кунг Пао Курочка"
                        },
                        new
                        {
                            Id = new Guid("4b55efdb-5fe5-4787-b1e5-5c0d7be0d1db"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3048),
                            Discount = 0,
                            DishType = 0,
                            Price = 15.50m,
                            SubCategoryId = new Guid("547a230d-a5e0-4885-8f35-4a17f8d47e1b"),
                            SubtitleEn = "Traditional sweet pork",
                            TitleArm = "Քաղցր և Թթու Խոզ",
                            TitleEn = "Sweet and Sour Pork",
                            TitleRu = "Сладкая и кислая свинина"
                        },
                        new
                        {
                            Id = new Guid("0234ebd9-f29c-45e1-82c4-e92c9f48b05d"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3051),
                            Discount = 0,
                            DishType = 0,
                            Price = 10.20m,
                            SubCategoryId = new Guid("547a230d-a5e0-4885-8f35-4a17f8d47e1b"),
                            SubtitleEn = "Spicy Sichuan tofu",
                            TitleArm = "Մա Պո Թոֆու",
                            TitleEn = "Ma Po Tofu",
                            TitleRu = "Ма По Тофу"
                        },
                        new
                        {
                            Id = new Guid("29cf0695-512e-4894-ae0c-ca3c00ce36c3"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3057),
                            Discount = 0,
                            DishType = 0,
                            Price = 8.75m,
                            SubCategoryId = new Guid("eeb295fd-8c9f-40a2-9927-6d88a6e371da"),
                            SubtitleEn = "Crispy duck with sauce",
                            TitleArm = "Պեկինյան Բադ",
                            TitleEn = "Peking Duck",
                            TitleRu = "Пекинская утка"
                        },
                        new
                        {
                            Id = new Guid("fe90c449-5cec-496b-a234-f57a4be76345"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3063),
                            Discount = 0,
                            DishType = 0,
                            Price = 9.99m,
                            SubCategoryId = new Guid("eeb295fd-8c9f-40a2-9927-6d88a6e371da"),
                            SubtitleEn = "Crispy fried rolls",
                            TitleArm = "Գարնանային Շարունակվածքներ",
                            TitleEn = "Spring Rolls",
                            TitleRu = "Весенние роллы"
                        },
                        new
                        {
                            Id = new Guid("1a15c39f-13a5-4823-aaf6-5af32b554ae6"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3066),
                            Discount = 0,
                            DishType = 0,
                            Price = 7.80m,
                            SubCategoryId = new Guid("eeb295fd-8c9f-40a2-9927-6d88a6e371da"),
                            SubtitleEn = "Traditional Chinese dumplings",
                            TitleArm = "Դիմ Սում",
                            TitleEn = "Dim Sum",
                            TitleRu = "Дим Сам"
                        },
                        new
                        {
                            Id = new Guid("3644568d-483e-402b-903e-1c07b7087d7a"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3109),
                            Discount = 0,
                            DishType = 1,
                            Price = 12.99m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Traditional Japanese rice and fish",
                            TitleArm = "Սուշի",
                            TitleEn = "Sushi",
                            TitleRu = "Суши"
                        },
                        new
                        {
                            Id = new Guid("066cd1e6-8557-4d89-9b56-740bcd704acb"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3353),
                            Discount = 0,
                            DishType = 1,
                            Price = 14.50m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Noodle soup with various toppings",
                            TitleArm = "Ռամեն",
                            TitleEn = "Ramen",
                            TitleRu = "Рамен"
                        },
                        new
                        {
                            Id = new Guid("3fe1e60f-1bdb-43c5-9afc-d72c4a59bace"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3356),
                            Discount = 0,
                            DishType = 1,
                            Price = 11.25m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Battered and fried seafood or vegetables",
                            TitleArm = "Տեմպուրա",
                            TitleEn = "Tempura",
                            TitleRu = "Темпура"
                        },
                        new
                        {
                            Id = new Guid("c1d0a479-0f37-42a6-9cc7-38194b430307"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3359),
                            Discount = 0,
                            DishType = 1,
                            Price = 13.30m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Thick wheat flour noodles",
                            TitleArm = "Ուդոն",
                            TitleEn = "Udon",
                            TitleRu = "Удон"
                        },
                        new
                        {
                            Id = new Guid("73a0663b-8a96-4c9b-8558-8d2fd82d1038"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3362),
                            Discount = 0,
                            DishType = 1,
                            Price = 10.99m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Fresh sliced raw fish",
                            TitleArm = "Սաշիմի",
                            TitleEn = "Sashimi",
                            TitleRu = "Сашими"
                        },
                        new
                        {
                            Id = new Guid("95c87c01-c0fc-43e2-b6f2-6f36f08ff7d2"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3365),
                            Discount = 0,
                            DishType = 1,
                            Price = 15.99m,
                            SubCategoryId = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            SubtitleEn = "Grilled skewered chicken",
                            TitleArm = "Յակիտորի",
                            TitleEn = "Yakitori",
                            TitleRu = "Якитори"
                        },
                        new
                        {
                            Id = new Guid("bb0cac24-254d-46e5-a3b2-29f345d60bb8"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3367),
                            Discount = 0,
                            DishType = 2,
                            Price = 5.99m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Traditional Japanese tea",
                            TitleArm = "Կանաչ Թեյ",
                            TitleEn = "Green Tea",
                            TitleRu = "Зеленый чай"
                        },
                        new
                        {
                            Id = new Guid("c80db0fc-6887-43a6-82fb-b8b1c383b8c9"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3370),
                            Discount = 0,
                            DishType = 2,
                            Price = 6.50m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Japanese rice wine",
                            TitleArm = "Սակե",
                            TitleEn = "Sake",
                            TitleRu = "Саке"
                        },
                        new
                        {
                            Id = new Guid("8b3fd35b-1ed1-459a-ab70-573e00f35e71"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3375),
                            Discount = 0,
                            DishType = 2,
                            Price = 4.75m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Chinese tea",
                            TitleArm = "Օլոնգ Թեյ",
                            TitleEn = "Oolong Tea",
                            TitleRu = "Улун чай"
                        },
                        new
                        {
                            Id = new Guid("abf55ff8-d618-44d7-80f5-b795c688ae90"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3378),
                            Discount = 0,
                            DishType = 2,
                            Price = 3.99m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Scented green tea",
                            TitleArm = "Յասմին Թեյ",
                            TitleEn = "Jasmine Tea",
                            TitleRu = "Жасминовый чай"
                        },
                        new
                        {
                            Id = new Guid("051d8fa0-7bfb-452f-bbb2-e7f7c276990d"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3380),
                            Discount = 0,
                            DishType = 2,
                            Price = 7.00m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Tea with tapioca pearls",
                            TitleArm = "Բուբլ Թեյ",
                            TitleEn = "Bubble Tea",
                            TitleRu = "Бабл-чай"
                        },
                        new
                        {
                            Id = new Guid("13d642ca-356d-4174-8be6-3a7e4b7152dc"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(3383),
                            Discount = 0,
                            DishType = 2,
                            Price = 4.50m,
                            SubCategoryId = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            SubtitleEn = "Chinese black tea",
                            TitleArm = "Սև Թեյ",
                            TitleEn = "Black Tea",
                            TitleRu = "Черный чай"
                        });
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubtitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SubtitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishType")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("547a230d-a5e0-4885-8f35-4a17f8d47e1b"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2822),
                            DishType = 0,
                            TitleArm = "Աղցաններ",
                            TitleEn = "Salads",
                            TitleRu = "Салаты"
                        },
                        new
                        {
                            Id = new Guid("eeb295fd-8c9f-40a2-9927-6d88a6e371da"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2834),
                            DishType = 0,
                            TitleArm = "Ապուրներ",
                            TitleEn = "Soups",
                            TitleRu = "Супы"
                        },
                        new
                        {
                            Id = new Guid("49803b04-2981-4d3f-99fb-34c0e41a64b6"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2836),
                            DishType = 0,
                            TitleArm = "Լապշաներ",
                            TitleEn = "Noodles",
                            TitleRu = "Лапша"
                        },
                        new
                        {
                            Id = new Guid("4deeef11-00ca-4fcd-9184-431d15e9e39d"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2838),
                            DishType = 0,
                            TitleArm = "Բրինձներ, հաց",
                            TitleEn = "Rice and bread",
                            TitleRu = "Рис, хлеб"
                        },
                        new
                        {
                            Id = new Guid("9e395771-48ce-46ea-95c9-806fae12946f"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2840),
                            DishType = 0,
                            TitleArm = "Հորթի մսով կերակուրներ",
                            TitleEn = "Veal dishes",
                            TitleRu = "Блюда из телятины"
                        },
                        new
                        {
                            Id = new Guid("3538e8ff-aeac-4ca1-aa68-9fa34d0453d5"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2842),
                            DishType = 0,
                            TitleArm = "Խոզի մսով կերակուրներ",
                            TitleEn = "Pork dishes",
                            TitleRu = "Блюда из свинины"
                        },
                        new
                        {
                            Id = new Guid("f7ae30c0-5ec7-4736-8302-c7553a9516a2"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2843),
                            DishType = 0,
                            TitleArm = "Հավի մսով կերակուրներ",
                            TitleEn = "Chicken dishes",
                            TitleRu = "Блюда из курицы"
                        },
                        new
                        {
                            Id = new Guid("dc70a381-ba5c-4a1f-bb63-c7d0d8c52188"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2845),
                            DishType = 0,
                            TitleArm = "Գառի մսով կերակուրներ",
                            TitleEn = "Lamb dishes",
                            TitleRu = "Блюда из баранины"
                        },
                        new
                        {
                            Id = new Guid("8dd7be8f-742a-4d01-bcc9-c7a276027c17"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2846),
                            DishType = 0,
                            TitleArm = "Ճագարի մսով կերակուրներ",
                            TitleEn = "Rabbit dishes",
                            TitleRu = "Блюда из мяса кролика"
                        },
                        new
                        {
                            Id = new Guid("bfbd9fd9-f98f-42ec-99cb-a14545c89ecc"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2848),
                            DishType = 0,
                            TitleArm = "Ծովամթերքով կերակուրներ",
                            TitleEn = "Seafood dishes",
                            TitleRu = "Блюда из морепродуктов"
                        },
                        new
                        {
                            Id = new Guid("63f6c1d4-b259-48fd-9bd3-9c8dc5ce7838"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2853),
                            DishType = 0,
                            TitleArm = "Պիլմենիներ",
                            TitleEn = "Dumplings",
                            TitleRu = "пельмени"
                        },
                        new
                        {
                            Id = new Guid("f9efe343-07b1-4bfc-96f0-0feeeee146cd"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2854),
                            DishType = 1,
                            TitleArm = "Սեթեր",
                            TitleEn = "Sets",
                            TitleRu = "Сеты"
                        },
                        new
                        {
                            Id = new Guid("83beee31-2b8d-488a-b6a0-2b672d515720"),
                            DateAdded = new DateTime(2024, 12, 30, 13, 36, 6, 669, DateTimeKind.Utc).AddTicks(2861),
                            DishType = 2,
                            TitleArm = "Թեյեր",
                            TitleEn = "Tea's",
                            TitleRu = "Чайы"
                        });
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96610323-439a-4715-be46-cb12efe37774",
                            Email = "my@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTNVU5g3LFlHiDxn75YgUTRivaiaiU8XDuTZhNIW604aqtFIhujra8o61lK1P+XFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "44546e06-8719-4ad8-b88a-f271ae9d6eab",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            RoleId = "44546e06-8719-4ad8-b88a-f271ae9d6eab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.Dish", b =>
                {
                    b.HasOne("ChinaFood.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ChinaFood.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChinaFood.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChinaFood.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChinaFood.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChinaFood.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChinaFood.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChinaFood.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
